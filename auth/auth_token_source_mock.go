// Code generated by MockGen. DO NOT EDIT.
// Source: auth_token_source.go
//
// Generated by this command:
//
//	mockgen -source=auth_token_source.go -destination=auth_token_source_mock.go -package=auth TokenSource
//

// Package auth is a generated GoMock package.
package auth

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTokenSource is a mock of TokenSource interface.
type MockTokenSource struct {
	ctrl     *gomock.Controller
	recorder *MockTokenSourceMockRecorder
	isgomock struct{}
}

// MockTokenSourceMockRecorder is the mock recorder for MockTokenSource.
type MockTokenSourceMockRecorder struct {
	mock *MockTokenSource
}

// NewMockTokenSource creates a new mock instance.
func NewMockTokenSource(ctrl *gomock.Controller) *MockTokenSource {
	mock := &MockTokenSource{ctrl: ctrl}
	mock.recorder = &MockTokenSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenSource) EXPECT() *MockTokenSourceMockRecorder {
	return m.recorder
}

// Token mocks base method.
func (m *MockTokenSource) Token(ctx context.Context) (*Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Token", ctx)
	ret0, _ := ret[0].(*Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Token indicates an expected call of Token.
func (mr *MockTokenSourceMockRecorder) Token(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Token", reflect.TypeOf((*MockTokenSource)(nil).Token), ctx)
}
