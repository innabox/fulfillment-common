// Code generated by MockGen. DO NOT EDIT.
// Source: oauth_flow_listener.go
//
// Generated by this command:
//
//	mockgen -source=oauth_flow_listener.go -destination=oauth_flow_listener_mock.go -package=oauth FlowListener
//

// Package oauth is a generated GoMock package.
package oauth

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFlowListener is a mock of FlowListener interface.
type MockFlowListener struct {
	ctrl     *gomock.Controller
	recorder *MockFlowListenerMockRecorder
	isgomock struct{}
}

// MockFlowListenerMockRecorder is the mock recorder for MockFlowListener.
type MockFlowListenerMockRecorder struct {
	mock *MockFlowListener
}

// NewMockFlowListener creates a new mock instance.
func NewMockFlowListener(ctrl *gomock.Controller) *MockFlowListener {
	mock := &MockFlowListener{ctrl: ctrl}
	mock.recorder = &MockFlowListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlowListener) EXPECT() *MockFlowListenerMockRecorder {
	return m.recorder
}

// End mocks base method.
func (m *MockFlowListener) End(ctx context.Context, event FlowEndEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "End", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// End indicates an expected call of End.
func (mr *MockFlowListenerMockRecorder) End(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "End", reflect.TypeOf((*MockFlowListener)(nil).End), ctx, event)
}

// Start mocks base method.
func (m *MockFlowListener) Start(ctx context.Context, event FlowStartEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockFlowListenerMockRecorder) Start(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockFlowListener)(nil).Start), ctx, event)
}
